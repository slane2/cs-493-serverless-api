
service: music-api-node
frameworkVersion: '2'

custom:
  tableName: 'music'
  dynamodb:
    start:
      migrate: true

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  iamManagedPolicies: 
    - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
    - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  Resource:
        - { "Fn::GetAtt": ["MusicDynamoDBTable", "Arn" ] }
  environment:
    MUSIC_TABLE: ${self:custom.tableName}


plugins:
  - serverless-offline
  - serverless-express
  - serverless-iam-roles-per-function

functions:
  hello:
    handler: handler.hello
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 's3:ListBucket'
        Resource: "arn:aws:s3:::shaylalalala522"
      - Effect: 'Allow'
        Action:
          - 's3:ListObjects'
        Resource: "arn:aws:s3:::shaylalalala522"
      - Effect: 'Allow'
        Action:
          - 's3:GetObject'
        Resource: "arn:aws:s3:::shaylalalala522"
    events:
      - httpApi:
          path: /dotify
          method: get
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY /{proxy+}'
  getGenres:
    handler: index.handler
    events:
      - http: 'GET /genres'

resources:
  Resources:
    MusicDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          # partition key
          - AttributeName: "pk"
            AttributeType: "S"
            #sort key
          - AttributeName: "sk"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "pk"
            KeyType: "HASH"
          - AttributeName: "sk"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'music'
        # Projection:
        #   ProjectionType: ALL
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     NewResource:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: shaylalalala522
# Outputs:
#   NewOutput:
#     Description: "Description for the output"
#     Value: "Some output value"
